{"version":3,"sources":["../../src/__test__/envFileHelpers.spec.js"],"names":["jest","mock","describe","test","setExistsStatus","expect","toBe","foo","bar","resolves","undefined","status","rejects","toEqual","error"],"mappings":";;AAAA;;;;AACA;;;;AAEAA,KAAKC,IAAL,CAAU,IAAV;;AAEAC,SAAS,gBAAT,EAA2B,YAAM;AAC/BA,WAAS,iBAAT,EAA4B,YAAM;AAChCC,SAAK,gCAAL,EAAuC,YAAM;AAC3C,mBAAGC,eAAH,CAAmB,IAAnB;AACAC,aAAO,sCAAP,EAA0BC,IAA1B,CAA+B,IAA/B;AACD,KAHD;AAIAH,SAAK,0CAAL,EAAiD,YAAM;AACrD,mBAAGC,eAAH,CAAmB,KAAnB;AACAC,aAAO,sCAAP,EAA0BC,IAA1B,CAA+B,KAA/B;AACD,KAHD;AAID,GATD;AAUAJ,WAAS,kBAAT,EAA6B,YAAM;AACjCC,SAAK,0DAAL,EAAiE,YAAM;AACrEE,aAAO,sCAAiB,OAAjB,CAAP,EAAkCC,IAAlC,CAAuC,OAAvC;AACD,KAFD;AAGAH,SAAK,mDAAL,EAA0D,YAAM;AAC9DE,aAAO,sCAAiB,QAAjB,CAAP,EAAmCC,IAAnC,CAAwC,OAAxC;AACD,KAFD;AAGAH,SAAK,oDAAL,EAA2D,YAAM;AAC/DE,aAAO,sCAAiB,eAAjB,CAAP,EAA0CC,IAA1C,CAA+C,QAA/C;AACD,KAFD;AAGD,GAVD;AAWAJ,WAAS,0BAAT,EAAqC,YAAM;AACzCC,SAAK,iCAAL,EAAwC,YAAM;AAC5CE,aAAO,8CAAyB,EAAEE,KAAK,MAAP,EAAeC,KAAK,OAApB,EAAzB,CAAP,EAAgEF,IAAhE,CAAqE,uBAArE;AACD,KAFD;AAGD,GAJD;AAKAJ,WAAS,cAAT,EAAyB,YAAM;AAC7BC,SAAK,yBAAL,EAAgC,YAAM;AACpCE,aAAO,kCAAa,EAAEE,KAAK,MAAP,EAAeC,KAAK,OAApB,EAAb,CAAP,EAAoDC,QAApD,CAA6DH,IAA7D,CAAkEI,SAAlE;AACD,KAFD;AAGAP,SAAK,uBAAL,EAA8B,YAAM;AAClCE,aAAO,kCAAa,EAAEM,QAAQ,OAAV,EAAmBH,KAAK,OAAxB,EAAb,CAAP,EAAwDI,OAAxD,CAAgEC,OAAhE,CAAwE;AACtEC,eAAO;AAD+D,OAAxE;AAGD,KAJD;AAKD,GATD;AAUD,CArCD","file":"envFileHelpers.spec.js","sourcesContent":["import fs from 'fs';\nimport { isEnvFileExists, removeNamePrefix, convertObjectToPlainData, writeEnvFile } from '../helpers/envFileHelpers';\n\njest.mock('fs');\n\ndescribe('envFileHelpers', () => {\n  describe('isEnvFileExists', () => {\n    test('return true if the file exists', () => {\n      fs.setExistsStatus(true);\n      expect(isEnvFileExists()).toBe(true);\n    });\n    test('return false if the file does not exists', () => {\n      fs.setExistsStatus(false);\n      expect(isEnvFileExists()).toBe(false);\n    });\n  });\n  describe('removeNamePrefix', () => {\n    test('return the name without the prefix without leading slash', () => {\n      expect(removeNamePrefix('first')).toBe('first');\n    });\n    test('return the name without the prefix with 1 segment', () => {\n      expect(removeNamePrefix('/first')).toBe('first');\n    });\n    test('return the name without the prefix with 2 segments', () => {\n      expect(removeNamePrefix('/first/second')).toBe('second');\n    });\n  });\n  describe('convertObjectToPlainData', () => {\n    test('convert an object to plain data', () => {\n      expect(convertObjectToPlainData({ foo: 'test', bar: 'test2' })).toBe('foo=test\\nbar=test2\\n');\n    });\n  });\n  describe('writeEnvFile', () => {\n    test('write file with success', () => {\n      expect(writeEnvFile({ foo: 'test', bar: 'test2' })).resolves.toBe(undefined);\n    });\n    test('write file with error', () => {\n      expect(writeEnvFile({ status: 'error', bar: 'test2' })).rejects.toEqual({\n        error: 'An error occured',\n      });\n    });\n  });\n});\n"]}